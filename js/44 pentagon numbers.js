/*

Problem 44

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten 
pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 
70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and 
difference are pentagonal and D = |Pk − Pj| is minimised; what is 
the value of D?

*/

'use strict';


function main() {
	var pent = [ NaN, 1 ]; // pentagonals
	var min, // undefined, since we don't know how big it is
	    cnt = 0; // how many comparisons, purely for benchmark

	console.time('solution found in'); // time till first solution
	for (var i = 1; true; i++) {
		var inner = 0; // comparisons before breaking inner loop, benchmark

		for (var j = i - 1; j > 0; j--) { // start from smallest difference
			cnt++, inner++; // benchmarks

			var diff = pent[i] - pent[j];
			var sum = pent[i] + pent[j];

			if (diff > min) { // no point of checking down further, if i already
				// produces diffs bigger than min
				break;
			}

			if (isPentagonal(diff) && isPentagonal(sum)) { // potential solution
				console.log('Found --', 'diff: ' + diff, 'sum: ' + sum, 
					'i: ' + i, 'j: ' + j, 'pent[i]: ' + pent[i], 
					'pent[j]: ' + pent[j]);
				console.timeEnd('solution found in');

				if (typeof(min) === 'undefined' || diff < min) {
					min = diff;
				}
			}
		}

		// minimum has been proven, difference is greater
		if (pent[pent.length - 2] - pent[pent.length - 3] >= min) break; 
		
		pent.push(generatePentagonal(i)); // get next number
/*		console.log(inner, diff, sum, i, j, pent[i], pent[j]);*/
	}

	console.log('Comparisons:', cnt);
	console.log('Biggest %dth pentagonal checked:', i, pent[pent.length - 1]);

	return min;
}


function generatePentagonal(n) {
	return (n * (3 * n - 1) / 2);
}


function isPentagonal(n) {
	var n = (Math.sqrt(24 * n + 1) + 1) / 6; // test applies to positive 
		// integers only, but works in our case

	return n % 1 === 0; // if natural number true, else false
}


console.time('solution and check');

var res = main();

console.timeEnd('solution and check');

console.log('ANSWER:', res);